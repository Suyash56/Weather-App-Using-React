{"version":3,"sources":["components/CityInput/index.js","components/CityWeather/index.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setcity","fetching","useState","error","seterror","className","Form","Group","controlId","Label","Control","value","type","placeholder","onChange","e","target","Button","variant","onClick","preventDefault","CityWeather","weather","name","main","temp","humidity","pressure","App","setweather","console","log","fetch","then","response","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAEe,SAASA,EAAT,GAA6C,IAAzBC,EAAwB,EAAxBA,KAAKC,EAAmB,EAAnBA,QAAQC,EAAW,EAAXA,SAAW,EAChCC,mBAAS,IADuB,mBAChDC,EADgD,KAC1CC,EAD0C,KAcvD,OACI,qBAAKC,UAAU,YAAf,SACI,eAACC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,MAAOZ,EAAMa,KAAK,QAAQC,YAAY,cAAcC,SAAU,SAACC,GAAD,OAAKf,EAAQe,EAAEC,OAAOL,aAEtG,mBAAGN,UAAU,cAAb,SAA4BF,IAC5B,cAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUN,KAAK,SAASO,QAnBjC,SAACJ,GAChBA,EAAEK,iBACErB,GAIAK,EAAS,IACTH,EAASF,IAJTK,EAAS,sBAgBL,yBCtBD,SAASiB,EAAT,GAAiC,IAAD,MAAVC,EAAU,EAAVA,QACjC,OACI,gCACA,6CAASA,QAAT,IAASA,OAAT,EAASA,EAASC,QAClB,oDAAgBD,QAAhB,IAAgBA,GAAhB,UAAgBA,EAASE,YAAzB,aAAgB,EAAeC,QAC/B,iDAAaH,QAAb,IAAaA,GAAb,UAAaA,EAASE,YAAtB,aAAa,EAAeE,YAC5B,iDAAaJ,QAAb,IAAaA,GAAb,UAAaA,EAASE,YAAtB,aAAa,EAAeG,eCcrBC,MAjBf,WAAgB,IAAD,EACS1B,mBAAS,IADlB,mBACNH,EADM,KACAC,EADA,OAEcE,mBAAS,IAFvB,mBAENoB,EAFM,KAEEO,EAFF,KASb,OADAC,QAAQC,IAAIT,GAEV,sBAAKjB,UAAU,MAAf,UACE,cAACP,EAAD,CAAWC,KAAMA,EAAMC,QAASA,EAASC,SAR9B,SAACF,GACZiC,MAAM,qDAAD,OAAsDjC,EAAtD,4CACJkC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACtBF,MAAK,SAAAG,GAAI,OAAEP,EAAWO,SAMzB,cAACf,EAAD,CAAaC,QAASA,QCLbe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07bcd044.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {Form ,Button} from \"react-bootstrap\";\r\nexport default function CityInput({city,setcity,fetching}) {\r\n    const [error,seterror]=useState(\"\");\r\n    \r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(!city){\r\n            seterror(\"input field empty\")\r\n        }\r\n        else{\r\n            seterror(\"\");\r\n            fetching(city);\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <Form>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control value={city} type=\"email\" placeholder=\"Enter email\" onChange={(e)=>setcity(e.target.value)} />  \r\n                </Form.Group>\r\n                <p className=\"text-danger\">{error}</p>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\r\n                    Submit\r\n                 </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function CityWeather({weather}) {\r\n    return (\r\n        <div>\r\n        <p>name:{weather?.name}</p>\r\n        <p>temperature:{weather?.main?.temp}</p>\r\n        <p>humidity:{weather?.main?.humidity}</p>\r\n        <p>pressure:{weather?.main?.pressure}</p>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport {useState,useEffect} from \"react\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CityInput from \"./components/CityInput\"\nimport CityWeather from \"./components/CityWeather\"\nfunction App() {\n  const [city ,setcity]=useState(\"\")\n  const [weather,setweather]=useState(\"\")\n  const fetching=(city)=>{\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=4c496af33d732297c30b641b3b235e47`)\n      .then(response=>response.json())\n        .then(data=>setweather(data));\n  }\n  console.log(weather)\n  return (\n    <div className=\"App\">\n      <CityInput city={city} setcity={setcity} fetching={fetching}/>\n      <CityWeather weather={weather}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}